#!/bin/bash

set -euo pipefail

ROOTFS_DIR="rootfs"
IMAGE_FILE="rootfs.ext4"
IMAGE_SIZE_MB=512

if [[ "$EUID" -ne 0 ]]; then
  echo "‚ùå Bitte als root ausf√ºhren (z.B. mit sudo)."
  exit 1
fi

if [[ ! -d "$ROOTFS_DIR" ]]; then
  echo "‚ùå Verzeichnis '$ROOTFS_DIR' existiert nicht."
  exit 1
fi

MOUNT_DIR=$(mktemp -d -t rootfs_mount_XXXX)
if [[ ! -d "$MOUNT_DIR" ]]; then
  echo "‚ùå Konnte tempor√§res Mount-Verzeichnis nicht erstellen."
  exit 1
fi
echo "üóÇ Tempor√§res Mount-Verzeichnis: $MOUNT_DIR"

# Cleanup Funktion, auch f√ºr Loop-Device
cleanup() {
  echo "üßπ Aufr√§umen..."
  if mountpoint -q "$MOUNT_DIR"; then
    echo "üîΩ H√§nge Image aus..."
    umount "$MOUNT_DIR" || echo "‚ö†Ô∏è Aush√§ngen fehlgeschlagen"
  fi
  if [[ -n "${LOOP_DEVICE:-}" ]]; then
    echo "üåÄ Loop-Ger√§t trennen: $LOOP_DEVICE"
    losetup -d "$LOOP_DEVICE" || echo "‚ö†Ô∏è Loop-Ger√§t konnte nicht getrennt werden"
  fi
  rm -rf "$MOUNT_DIR"
  echo "‚úÖ Aufr√§umen abgeschlossen."
}
trap cleanup EXIT

echo "üì¶ Erstelle Image-Datei '$IMAGE_FILE' mit $IMAGE_SIZE_MB MB..."
if command -v fallocate &>/dev/null; then
  fallocate -l "${IMAGE_SIZE_MB}M" "$IMAGE_FILE"
else
  echo "‚ÑπÔ∏è fallocate nicht verf√ºgbar, benutze dd..."
  dd if=/dev/zero of="$IMAGE_FILE" bs=1M count="$IMAGE_SIZE_MB"
fi

echo "üß∑ Formatiere '$IMAGE_FILE' als ext4-Dateisystem..."
mkfs.ext4 -F "$IMAGE_FILE"

echo "üåÄ Loop-Ger√§t f√ºr Image setzen..."
LOOP_DEVICE=$(losetup --find --show "$IMAGE_FILE")
echo "üìÄ Image ist nun am Loop-Ger√§t: $LOOP_DEVICE"

echo "üîº H√§nge Loop-Ger√§t '$LOOP_DEVICE' in '$MOUNT_DIR' ein..."
mount "$LOOP_DEVICE" "$MOUNT_DIR"

echo "üìÇ Kopiere Inhalte von '$ROOTFS_DIR' nach '$MOUNT_DIR'..."
rsync -a "$ROOTFS_DIR"/ "$MOUNT_DIR"/

echo "‚úÖ Rootfs-Image erfolgreich erstellt: $IMAGE_FILE"
